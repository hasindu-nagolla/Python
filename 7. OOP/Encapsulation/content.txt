This code demonstrates the use of encapsulation (data hiding) in Python using access modifiers such as private (`__`) and protected (`_`) attributes. Let me explain some key points:

### Key Concepts:
1. **Public Attributes:**
   - Accessible from anywhere. 
   - Example: `self.name`

2. **Protected Attributes:**
   - Conventionally, attributes prefixed with a single underscore (`_`) are considered protected.
   - They can be accessed directly but are intended to be used only within the class and its subclasses.
   - Example: `self._city`

3. **Private Attributes:**
   - Attributes prefixed with a double underscore (`__`) are private, meaning they cannot be accessed directly from outside the class.
   - Example: `self.__age`
   
4. **Getters and Setters:**
   - Used to access and modify private attributes indirectly.
   - Example:

     ```python
     def get_age(self):
         return self.__age
     
     def set_age(self, age):
         self.__age = age
     ```

### Encapsulation in Action:
1. The `Person` class has a private attribute `__age` and a protected attribute `_city`.
2. You can access and modify the `__age` attribute through the getter and setter methods: `get_age()` and `set_age()`.
3. The `Student` class inherits from `Person` and demonstrates that the protected attribute `_city` can be accessed within the subclass, while the private attribute `__age` cannot.

### Example Output:

```python
John is Sleeping
22
after set age: 25
City: Kandy
```

This demonstrates how encapsulation works by controlling access to the attributes of a class, promoting better data management and security in object-oriented programming.